@typeparam TItem
@inherits BlazingTableBase<TItem>
@inject IJSRuntime jsRuntime;
@using BlazingTables.Component.TableFilters;

<CascadingValue Value="this">
    <div class="blazingTable">
        <row>
            <table id="@this.Id" class="table table-striped table-bordered" cellspacing="0" width="100%">
                <thead>
                    <tr>
                        @foreach (var column in this.columns)
                        {
                            <th class="th-sm">
                                @column.Header

                                @if (column is DataColumn<TItem>)
                                {
                                    var dataColumn = column as DataColumn<TItem>;
                                    @if (dataColumn.Filterable || dataColumn.Sortable)
                                    {
                                        <div class="dropdown float-right">
                                            <button class="btn dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            </button>
                                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                                                <a class="dropdown-item" href="#" @onclick="(() => HandleSortAZ(dataColumn))">Sort A-Z [Asc] <i class="fas fa-check" style="@(!dataColumn.Sorted || dataColumn.Sorting != Sorting.Ascending ? "display: none;" : string.Empty)"></i></a>
                                                <a class="dropdown-item" href="#" @onclick="(() => HandleSortZA(dataColumn))">Sort Z-A [Desc] <i class="fas fa-check" style="@(!dataColumn.Sorted || dataColumn.Sorting != Sorting.Descending ? "display: none;" : string.Empty)"></i></a>
                                                <div class="dropdown-divider"></div>

                                                @foreach (var filter in this.filters)
                                                {
                                                    <a class="dropdown-item" @onclick="() => HandleApplyFilterSubmit(filter, dataColumn)">@filter.Name <i class="fas fa-check" style="@(!dataColumn.IsFilterActive(filter) ? "display: none;" : string.Empty)"></i></a>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in this.FilteredData.Skip((this.curPage - 1) * this.RowsPerPage).Take(this.RowsPerPage))
                    {

                        <tr>
                            @foreach (var column in this.columns)
                            {
                                @if (column is DataColumn<TItem>)
                                {
                                    var dataColumn = column as DataColumn<TItem>;
                                    <td>@dataColumn.Value.Invoke(row).ToString()</td>
                                }
                                else if (column is CustomColumn<TItem>)
                                {
                                    @((column as CustomColumn<TItem>).ChildContent(row));
                                }
                            }
                        </tr>

                    }
                </tbody>
            </table>
        </row>
        <row>
            <div class="col-sm">
                <a>Displaying @((this.curPage - 1) * (this.RowsPerPage)) - @(this.curPage * this.RowsPerPage) of @(this.FilteredData.Count()) items</a>
            </div>
            <div class="col-sm">
                <nav aria-label="Blazing page navigation">
                    <ul class="pagination justify-content-end">
                        <li class="page-item @(this.curPage <= 1 ? "disabled" : string.Empty)">
                            <a class="page-link" href="#" tabindex="-1" @onclick="HandlePreviousPage">Previous</a>
                        </li>
                        @if (this.curPage > 1)
                        {
                            if (this.curPage > 2 && this.curPage + 3 > (this.FilteredData.Count() / this.RowsPerPage))
                            {
                                var backTwoPageNum = this.curPage - 2;
                                <li class="page-item"><a class="page-link" href="#" @onclick="() => HandleSetPage(backTwoPageNum)">@(backTwoPageNum)</a></li>
                            }
                            var backOnePageNum = this.curPage - 1;
                            <li class="page-item"><a class="page-link" href="#" @onclick="() => HandleSetPage(backOnePageNum)">@(backOnePageNum)</a></li>

                        }
                        @for (int i = 0; i <= 3; i++)
                        {
                            if (this.curPage + i > (this.FilteredData.Count() / this.RowsPerPage))
                                break;

                            var pageNum = this.curPage + i;

                            <li class="page-item @(i == 0 ? "active" : string.Empty)"><a class="page-link" href="#" @onclick="() => HandleSetPage(pageNum)">@pageNum</a></li>
                        }
                        <li class="page-item @(this.curPage + 1 > (this.FilteredData.Count() / this.RowsPerPage) ? "disabled" : string.Empty)">
                            <a class="page-link" href="#" @onclick="HandleNextPage">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </row>
    </div>

    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Id { get; set; } = null!;

    private void HandleSetPage(int pageNum)
    {
        this.curPage = pageNum;

        StateHasChanged();
    }

    private void HandlePreviousPage()
    {
        if (this.curPage > 1)
            this.curPage--;

        StateHasChanged();
    }

    private void HandleNextPage()
    {
        if (this.curPage < (this.FilteredData.Count() / this.RowsPerPage))
            this.curPage++;

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        this.FilteredData = this.Data;
    }

    internal void AddColumn(IColumn<TItem> column)
    {
        this.columns.Add(column);
        StateHasChanged();
    }

    internal void AddFilter(TableFilter<TItem> filter)
    {
        this.filters.Add(filter);
    }

}